version: 0.2

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - echo Installing kubectl
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl

  pre_build:
    commands:
      - echo Assuming IAM Role for EKS access
      - TEMP_ROLE=$(aws sts assume-role --role-arn arn:aws:iam::381492168307:role/eks-access-role --role-session-name codebuild-eks-session --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq -r .Credentials.SessionToken)
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$(aws ecr describe-repositories --repository-names ${IMAGE_REPO_NAME} --query "repositories[0].repositoryUri" --output text)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Updating kubeconfig...
      - aws eks update-kubeconfig --name my-eks-cluster --region us-west-2
      - kubectl cluster-info
      - kubectl get nodes

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME .
      - docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Deploying to EKS...
      - kubectl apply -f kubernetes-manifests.yaml

artifacts:
  files: 
    - imagedefinitions.json
